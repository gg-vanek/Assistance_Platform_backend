# Generated by Django 4.1.2 on 2023-01-16 22:32

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator(), users.models.not_reserved_system_word_validator], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('biography', models.TextField(blank=True, default=None, null=True)),
                ('profile_image', models.ImageField(blank=True, default=None, null=True, upload_to='C:\\Users\\Vanek\\Desktop\\Assistance_Platform_backend\\media\\users/user_profile_images')),
                ('stage_of_study', models.CharField(choices=[('N', 'None'), ('S', 'School'), ('C', 'College'), ('B', "bachelor's degree"), ('M', "master's degree"), ('PG', 'postgraduate study')], default='N', max_length=2)),
                ('course_of_study', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(15)])),
                ('phone', models.CharField(blank=True, default=None, max_length=30, null=True)),
                ('telegram', models.CharField(blank=True, default=None, max_length=40, null=True)),
                ('vk', models.CharField(blank=True, default=None, max_length=40, null=True)),
                ('author_rating', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('author_review_counter', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('author_rating_normalized', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('implementer_rating', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('implementer_review_counter', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('implementer_rating_normalized', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
